<?php

namespace App\Controller;

use App\Entity\Evenement;
use App\Form\EvenementType;
use App\Repository\CatEventRepository;
use App\Repository\EvenementRepository;
use MercurySeries\FlashyBundle\FlashyNotifier;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Serializer\Normalizer\NormalizableInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class EvenementController extends AbstractController
{
    /**
     * @Route("/evenement", name="evenement")
     */
    public function index(): Response
    {
        return $this->render('evenement/index.html.twig', [
            'controller_name' => 'EvenementController',
        ]);
    }

    /**
     * @param EvenementRepository $rep
     * @return Response
     * @Route ("/Event/Affichage",name="EventAffiche")
     */
    public function list(EvenementRepository $rep,FlashyNotifier $flashyNotifier)
    {
        $pro=$rep->findAll();
       // $flashyNotifier->primaryDark('Event created!', 'http://your-awesome-link.com');
        return $this->render('evenement/list.html.twig',['tab'=>$pro]);
    }

    /**
     * @param Request $request
     * @return \Symfony\Component\HttpFoundation\RedirectResponse|Response
     * @Route ("/Event/Ajout",name="EventAjout")
     */
    public function aj(Request $request,FlashyNotifier $flashyNotifier)
    {
        $event= new Evenement();
        $form=$this->createForm(EvenementType::class,$event);
        $form->add('Ajouter',SubmitType::class);
        $form->handleRequest($request);
        if($form->isSubmitted() && $form->isValid())
        {
            $file = $form->get('image')->getData();
            //$file = $event->getImage();
            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
                $file->move(
                  $this->getParameter('images_directory'),
                    $fileName
                );
            $entityManager = $this->getDoctrine()->getManager();
            $event->setImage($fileName);
            $entityManager->persist($event);
            $entityManager->flush();
            // $entity=$this->getDoctrine()->getManager();
           // $entity->persist($event);
           // $entity->flush();
            $flashyNotifier->mutedDark('Evenement ajoutée !', 'http://your-awesome-link.com');
            return $this->redirectToRoute('EventAffiche');
        }
        return $this->render('evenement/add.html.twig',[
            'formaj'=>$form->createView()
        ]);
    }
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @param $id
     * @param EvenementRepository $rep
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     *  @Route ("/Event/Supprimer/{id}",name="Eventsupp")
     */

    public function supp($id,EvenementRepository $rep,FlashyNotifier $flashy)
    {
        $event=$rep->find($id);
        $entity=$this->getDoctrine()->getManager();
        $entity->remove($event);
        $entity->flush();
        $flashy->warning('Evenement supprimé !', 'http://your-awesome-link.com');
        return $this->redirectToRoute('EventAffiche');
    }

    /**
     * @param $id
     * @param EvenementRepository $rep
     * @param Request $request
     * @return \Symfony\Component\HttpFoundation\RedirectResponse|Response
     * @Route ("/Event/modifier/{id}",name="Eventmodif")
     */

    public function updateEvent ($id,EvenementRepository $rep, Request $request,FlashyNotifier $flashmsg)
    {
        $rec=$rep->find($id);
        $form=$this->createForm(EvenementType::class,$rec);
        $form->add('Modifier',SubmitType::class);
        $form->handleRequest($request);
        if($form->isSubmitted() && $form->isValid())
        {
            $file = $form->get('image')->getData();
           // $file = $rec->getImage();
            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
            $file->move(
                $this->getParameter('images_directory'),
                $fileName
            );
            $entityManager = $this->getDoctrine()->getManager();
            $rec->setImage($fileName);
            $entityManager->persist($rec);
            $entityManager->flush();
           // $entity=$this->getDoctrine()->getManager();
            //$entity->flush();
            $flashmsg->info('Evenement modifié !', 'http://your-awesome-link.com');
            return $this->redirectToRoute('EventAffiche');
        }
        return $this->render('evenement/update.html.twig',[
            'fup'=> $form->createView()
        ]);

    }

    /**
     * @param EvenementRepository $rep
     * @return Response
     * @Route ("/Event/refresh",name="Eventrefresh")
     */
    function  refresh(EvenementRepository $rep){
        $pro=$rep->OrderByDate_Deb();
        return $this->render('evenement/list.html.twig',['tab'=>$pro]);

    }

    /**
     * @param Request $request
     * @param NormalizableInterface $Normalizer
     * @return Response
     * @Route ("/searchevent ", name="searcheventx")
     */
    public function searchEventx(Request $request,NormalizerInterface $Normalizer)
    {
        $repository = $this->getDoctrine()->getRepository(Evenement::class);
        $requestString=$request->get('searchValue');
        $events = $repository->findEventtByNsc($requestString);
        $jsonContent = $Normalizer->normalize($events, 'json',['groups'=>'events:read']);
        $retour=json_encode($jsonContent);
        return new Response($retour);
    }

    /**
     * @Route ("/stats ", name="event_stat")
     */
    public function statistiques(CatEventRepository $categ){
        //chercher toutes les catégories
        $categories=$categ->findAll();
        $categnom= [] ;
        $categcolor= [];
        $categcount= [];
        foreach ($categories as $categorie){
         $categnom[]= $categorie->getLibelle();
         $categcolor[]= $categorie->getColor();
         $categcount[]= count($categorie->getEvenements());
        }

        return $this->render('evenement/stat.html.twig',[
            'categnom'=> json_encode($categnom),
            'categcolor'=> json_encode($categcolor),
            'categcount'=> json_encode($categcount)
        ]);

    }




}
